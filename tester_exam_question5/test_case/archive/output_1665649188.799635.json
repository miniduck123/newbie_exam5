{"content": {"suites": {"0": {"status": {"total_pass": 1, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 24, "total_error": 16}, "tests": {"0": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[jerlad]", "rerun": "0"}, "1": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[cxl2022]", "rerun": "0"}, "2": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[hjb1898]", "rerun": "0"}, "3": {"status": "PASS", "message": "", "test_name": "test_user_guess[klfly]", "rerun": "0"}, "4": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[zwb891]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n    \tdriver.login_flow()\n>   \tdriver.send_accounts(request.param)\n\ntest_guess_sign_in.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/web.py:98: in send_accounts\n    account_input = self.waiter.until(EC.visibility_of_element_located((By.ID, \"username\")))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"17aed7ae68643058889c7e6a95e867ad\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x1234dda20>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x000000010497e2fd chromedriver + 631549\nE       4   chromedriver                        0x000000010497e581 chromedriver + 632193\nE       5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\nE       6   chromedriver                        0x000000010499b7bd chromedriver + 751549\nE       7   chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       8   chromedriver                        0x000000010499b683 chromedriver + 751235\nE       9   chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       10  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:89: TimeoutException\n", "test_name": "test_user_guess[zwb891]", "rerun": "0"}, "5": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[ma123123]", "rerun": "0"}, "6": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[plum79]", "rerun": "0"}, "7": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[zhou0793]", "rerun": "0"}, "8": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[choudana3]", "rerun": "0"}, "9": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[manday444]", "rerun": "0"}, "10": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[173042830]", "rerun": "0"}, "11": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[152191hwb]", "rerun": "0"}, "12": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[jimaoqiang]", "rerun": "0"}, "13": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[candyxia]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[candyxia]", "rerun": "0"}, "14": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[sunying2015]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[sunying2015]", "rerun": "0"}, "15": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[petersheng]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[petersheng]", "rerun": "0"}, "16": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[yxf168]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[yxf168]", "rerun": "0"}, "17": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[lynn6688]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[lynn6688]", "rerun": "0"}, "18": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[leixize168]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[leixize168]", "rerun": "0"}, "19": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[ysp001]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1301, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[ysp001]", "rerun": "0"}, "20": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[liuliu8787]", "rerun": "0"}, "21": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[csn890112]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[csn890112]", "rerun": "0"}, "22": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[alex8888]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[alex8888]", "rerun": "0"}, "23": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[lq840114]", "rerun": "0"}, "24": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[zhouzhen288]", "rerun": "0"}, "25": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[ll999999]", "rerun": "0"}, "26": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[zerone]", "rerun": "0"}, "27": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[290029]", "rerun": "0"}, "28": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[brazxm]", "rerun": "0"}, "29": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[jmingda]", "rerun": "0"}, "30": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[lix19831127]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[lix19831127]", "rerun": "0"}, "31": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[a707042612]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[a707042612]", "rerun": "0"}, "32": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[miska3116]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[miska3116]", "rerun": "0"}, "33": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[cyt04100945]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[cyt04100945]", "rerun": "0"}, "34": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[zjx1992]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[zjx1992]", "rerun": "0"}, "35": {"status": "ERROR", "message": "driver = <common.wc_web.wc_web object at 0x127f7c550>, request = <SubRequest 'game_page' for <Function test_user_guess[bobo60521]>>\n\n    @pytest.fixture(scope='function',params = test_account)\n    def game_page(driver,request):\n>   \tdriver.login_flow()\n\ntest_guess_sign_in.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../common/wc_web.py:14: in login_flow\n    login_btn = self.click_element_by_xpath('//div[contains(@class,\"menu_main \")]//a[@class=\"login\"]')\n../common/web.py:46: in click_element_by_xpath\n    raise e\n../common/web.py:44: in click_element_by_xpath\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x127f7c640>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81e8174e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (1322, -16)\nE         (Session info: chrome=103.0.5060.53)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\nE       1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\nE       2   chromedriver                        0x0000000104948038 chromedriver + 409656\nE       3   chromedriver                        0x00000001049859e5 chromedriver + 661989\nE       4   chromedriver                        0x0000000104983593 chromedriver + 652691\nE       5   chromedriver                        0x0000000104980c24 chromedriver + 642084\nE       6   chromedriver                        0x000000010497f885 chromedriver + 637061\nE       7   chromedriver                        0x00000001049736a9 chromedriver + 587433\nE       8   chromedriver                        0x000000010499b792 chromedriver + 751506\nE       9   chromedriver                        0x0000000104972f65 chromedriver + 585573\nE       10  chromedriver                        0x000000010499b89e chromedriver + 751774\nE       11  chromedriver                        0x00000001049ae221 chromedriver + 827937\nE       12  chromedriver                        0x000000010499b683 chromedriver + 751235\nE       13  chromedriver                        0x0000000104971a45 chromedriver + 580165\nE       14  chromedriver                        0x0000000104972a95 chromedriver + 584341\nE       15  chromedriver                        0x0000000104cf255d chromedriver + 4253021\nE       16  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\nE       17  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\nE       18  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\nE       19  chromedriver                        0x0000000104cd154f chromedriver + 4117839\nE       20  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\nE       21  chromedriver                        0x0000000104d1205f chromedriver + 4382815\nE       22  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\nE       23  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:243: ElementClickInterceptedException\n", "test_name": "test_user_guess[bobo60521]", "rerun": "0"}, "36": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[wjb1984]", "rerun": "0"}, "37": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[feng2858]", "rerun": "0"}, "38": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[gurenjie]", "rerun": "0"}, "39": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[a719182]", "rerun": "0"}, "40": {"status": "FAIL", "message": "   selenium.common.exceptions.TimeoutException: Message: \n   Stacktrace:\n   0   chromedriver                        0x0000000104d21079 chromedriver + 4444281\n   1   chromedriver                        0x0000000104cad403 chromedriver + 3970051\n   2   chromedriver                        0x0000000104948038 chromedriver + 409656\n   3   chromedriver                        0x000000010497e2fd chromedriver + 631549\n   4   chromedriver                        0x000000010497e581 chromedriver + 632193\n   5   chromedriver                        0x00000001049b04f4 chromedriver + 836852\n   6   chromedriver                        0x000000010499b7bd chromedriver + 751549\n   7   chromedriver                        0x00000001049ae221 chromedriver + 827937\n   8   chromedriver                        0x000000010499b683 chromedriver + 751235\n   9   chromedriver                        0x0000000104971a45 chromedriver + 580165\n   10  chromedriver                        0x0000000104972a95 chromedriver + 584341\n   11  chromedriver                        0x0000000104cf255d chromedriver + 4253021\n   12  chromedriver                        0x0000000104cf73a1 chromedriver + 4273057\n   13  chromedriver                        0x0000000104cfc16f chromedriver + 4292975\n   14  chromedriver                        0x0000000104cf7dea chromedriver + 4275690\n   15  chromedriver                        0x0000000104cd154f chromedriver + 4117839\n   16  chromedriver                        0x0000000104d11ed8 chromedriver + 4382424\n   17  chromedriver                        0x0000000104d1205f chromedriver + 4382815\n   18  chromedriver                        0x0000000104d288d5 chromedriver + 4475093\n   19  libsystem_pthread.dylib             0x00007ff81e8174e1 _pthread_start + 125\n   20  libsystem_pthread.dylib             0x00007ff81e812f6b thread_start + 15\n", "test_name": "test_user_guess[klq9912015]", "rerun": "0"}}, "suite_name": "test_guess_sign_in.py"}}}, "date": "October 13, 2022", "start_time": 1665648543.7130969, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "1", "fail": "24", "skip": "0", "error": "16", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "41"}